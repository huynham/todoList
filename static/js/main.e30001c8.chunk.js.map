{"version":3,"sources":["component/AddTask.js","component/TodoList.js","component/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["AddTask","props","useState","name","setName","linkList","closeForm","showAddForm","Fragment","className","type","placeholder","onChange","e","target","value","onClick","addTask","TodoList","style","border","TaskList","setshowAddform","namep","push","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA2CeA,MAvCf,SAAiBC,GACf,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEOC,EAAW,WACZJ,EAAMK,aAYN,OAAyB,GAArBL,EAAMM,YAEF,cAAC,EAAD,IAIA,cAAC,IAAMC,SAAP,UACI,sBAAKC,UAAU,YAAf,UACI,8CACA,sBAAKA,UAAU,aAAf,UACI,yCACA,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,qBAAqBC,SAjB/E,SAACC,GAEhBT,EAAQS,EAAEC,OAAOC,aAkBJ,wBAAQL,KAAK,SAASD,UAAU,kBAAkBO,QAxBjD,WACjBf,EAAMgB,QAAQd,GACdE,KAsBgB,iBACA,wBAAQK,KAAK,SAASD,UAAU,kBAAkBO,QAASX,EAA3D,wBCzBTa,MARf,SAAkBjB,GAEV,OAAO,6BACH,oBAAKkB,MAAO,CAACC,OAAO,iBAApB,SAAuCnB,EAAME,UC8C1CkB,MA9Cf,WACA,MAAuCnB,oBAAS,GAAhD,mBAAOK,EAAP,KAAoBe,EAApB,KACA,EAAsBpB,mBAAS,CAAC,SAAS,WAAzC,mBAAOqB,EAAP,KAWG,OAXH,MAWuB,IAAhBhB,EAEC,cAAC,EAAD,CAASU,QANG,SAACd,GACfoB,EAAMC,KAAKrB,IAKkBG,UATb,WACdgB,GAAe,MAaP,sBAAKb,UAAU,YAAf,UACI,uBACA,uBACA,wBAAQC,KAAK,SAASD,UAAU,0BAA0BO,QApBxD,WACdM,GAAe,IAmBH,sBACA,2CACA,wBAAOb,UAAU,sBAAjB,UAEQ,6BACI,gDAKAc,EAAME,KAAI,SAAAtB,GACN,OAAO,cAAC,EAAD,CAAUA,KAAMA,cC1B5CuB,MARf,SAAazB,GACX,OACE,qBAAKQ,UAAU,MAAf,SACE,cAAC,EAAD,OCISkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.e30001c8.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport TaskList from './TaskList';\r\n\r\nfunction AddTask(props) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n   const linkList = () => {\r\n        props.closeForm()\r\n    }\r\n   const handleAddTask = () => {\r\n        props.addTask(name);\r\n        linkList();\r\n    }\r\n    const isChangedName = (e) => {\r\n     \r\n           setName(e.target.value);\r\n        \r\n    }\r\n\r\n        if (props.showAddForm == true) {\r\n            return (\r\n                <TaskList />\r\n            )\r\n        } else {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"container\">\r\n                        <h2>Add New Task</h2>\r\n                        <div className=\"form-group\">\r\n                            <label>Name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter name of task\" onChange={isChangedName} />\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"btn btn-default\" onClick={handleAddTask}>Add</button>\r\n                        <button type=\"button\" className=\"btn btn-default\" onClick={linkList}>Back</button>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    \r\n}\r\n\r\nexport default AddTask;","\r\n\r\nfunction TodoList(props) {\r\n\r\n        return <tr>\r\n            <td  style={{border:'1px solid red'}}>{props.name}</td>\r\n        </tr>\r\n    \r\n}\r\n\r\nexport default TodoList;","\r\nimport React, { useState } from 'react';\r\nimport AddTask from './AddTask';\r\nimport TodoList from './TodoList';\r\n\r\nfunction TaskList() {\r\nconst [showAddForm, setshowAddform ] = useState(false);\r\nconst [namep,setName]=useState([\"task-1\",\"task-2\"]);\r\n    const setStatus = () => {\r\n        setshowAddform(true);\r\n    }\r\n    const closeForm = () => {\r\n        setshowAddform(false);\r\n    }\r\n    const addTask = (name) => {\r\n      namep.push(name)\r\n        \r\n    }\r\n   if (showAddForm === true){\r\n       return (\r\n        <AddTask addTask={addTask} closeForm={closeForm} />\r\n       )\r\n   }else {\r\n        \r\n            return (\r\n                <div className=\"container\">\r\n                    <br />\r\n                    <br />\r\n                    <button type=\"button\" className=\"btn btn-outline-primary\" onClick={setStatus} >Add Task</button>\r\n                    <h2>List Task</h2>\r\n                    <table className=\"table table-striped\">\r\n                        \r\n                            <tr>\r\n                                <th>Name of task</th>\r\n                            </tr>\r\n                        \r\n                        \r\n                            {\r\n                                namep.map(name=> {\r\n                                    return <TodoList name={name}\r\n                                    />\r\n                                })\r\n                            }\r\n                        \r\n                    </table>\r\n                </div>\r\n            );\r\n        \r\n   }\r\n}\r\n\r\nexport default TaskList;","\n\nimport './App.css';\nimport TaskList from './component/TaskList';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <TaskList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}